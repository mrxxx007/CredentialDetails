package CredentialDetails.forms;

import CredentialDetails.app.AppConstants;
import CredentialDetails.app.Application;
import CredentialDetails.data.ApplicationData;
import CredentialDetails.data.ApplicationModel;
import CredentialDetails.service.FileService;
import CredentialDetails.service.UserMessageService;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.util.Arrays;

/**
 * Created by Admin on 03.06.2017.
 */
public class NewFileDialog extends JDialog {
    private JTextField fileNameField;
    private JPasswordField passwordField;
    private JPasswordField confirmPasswordField;
    private JButton cancelButton;
    private JButton okButton;
    private JPanel contentPane;
    private JButton pathButton;
    private JLabel pathLabel;

    public NewFileDialog(JFrame owner) {
        super(owner, true);
        setResizable(false);

        getContentPane().add(contentPane);
        pathLabel.setText("");
        //pathLabel.setBorder(new BevelBorder(BevelBorder.LOWERED));

        pathButton.addActionListener(e -> onOpenFolder());
        okButton.addActionListener((e) -> onOk());
        cancelButton.addActionListener((e) -> dispose());
    }

    public void showDialog() {
        pack();
        setLocationRelativeTo(getOwner());

        Double width = pathButton.getBounds().getX() - pathLabel.getBounds().getX() - 5;
        pathLabel.setPreferredSize(new Dimension(width.intValue(), -1));
        setVisible(true);
    }

    private void onOpenFolder() {
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        final String currentPath = pathLabel.getText();
        if (currentPath != null && !currentPath.isEmpty()) {
            File dir = new File(currentPath);
            if (dir.exists()) {
                fileChooser.setCurrentDirectory(dir);
            }
        }

        int dialogResult = fileChooser.showOpenDialog(this);
        if (dialogResult == JFileChooser.APPROVE_OPTION) {
            final String path = fileChooser.getSelectedFile().getAbsolutePath();
//            pathLabel.setText("<html>" + path + "</html>");
            pathLabel.setText(path);
            pathLabel.setToolTipText(path);
            pathLabel.update(this.getGraphics());
            this.pack();
        }
    }

    private void onOk() {
        final String fileName = fileNameField.getText();
        final String filePath = pathLabel.getText();

        if (fileName == null || fileName.isEmpty()) {
            UserMessageService.displayInfoMessage("Please enter a name of the file you are going to create");
        } else if (filePath == null || filePath.isEmpty()) {
            UserMessageService.displayInfoMessage("Please select a directory on your disk where the file will be created");
        } else if (passwordField.getPassword().length == 0) {
            UserMessageService.displayWarningMessage("Password is required. Please enter your master password");
        } else if (confirmPasswordField.getPassword().length == 0) {
            UserMessageService.displayWarningMessage("Please confirm your password");
        } else if (!Arrays.equals(passwordField.getPassword(), confirmPasswordField.getPassword())) {
            UserMessageService.displayErrorMessage("Passwords do not match");
        } else {
            Application application = Application.getInstance();
            ApplicationModel appModel = application.getMainForm().getModel();
            String pathAndName = fileName.endsWith("." + AppConstants.FILE_EXTENSION)
                    ? filePath + fileName
                    : filePath + File.separator + fileName + "." + AppConstants.FILE_EXTENSION;

            appModel.setApplicationData(new ApplicationData());
            appModel.setCurrentFile(new File(pathAndName));
            appModel.setActiveSection("");

            FileService.saveApplicationDataToFile();

            dispose();

            appModel.refreshAll();
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.setOpaque(true);
        final JLabel label1 = new JLabel();
        label1.setIcon(new ImageIcon(getClass().getResource("/images/title-bar.jpg")));
        label1.setOpaque(false);
        label1.setText("");
        contentPane.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(500, -1), new Dimension(500, -1), 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(4, 3, new Insets(0, 10, 5, 10), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("File name:");
        panel1.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fileNameField = new JTextField();
        panel1.add(fileNameField, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Master password:");
        panel1.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        passwordField = new JPasswordField();
        panel1.add(passwordField, new GridConstraints(2, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Repeat password:");
        panel1.add(label4, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        confirmPasswordField = new JPasswordField();
        panel1.add(confirmPasswordField, new GridConstraints(3, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("File location:");
        panel1.add(label5, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        pathButton = new JButton();
        pathButton.setText("...");
        panel1.add(pathButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        pathLabel = new JLabel();
        pathLabel.setText("Label");
        panel1.add(pathLabel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(321, -1), new Dimension(321, -1), new Dimension(321, -1), 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 3, new Insets(5, 10, 5, 10), -1, -1));
        contentPane.add(panel2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        okButton = new JButton();
        okButton.setText("OK");
        panel2.add(okButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(60, -1), new Dimension(70, -1), null, 0, false));
        final JSeparator separator1 = new JSeparator();
        panel2.add(separator1, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        panel2.add(cancelButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(70, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
